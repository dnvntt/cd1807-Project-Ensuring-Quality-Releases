name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise, comment out the line below. 
pool: myAgentPool

variables:
  python.version: '3.8.10'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'myServiceConnection'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  #environmentName: 'TEST'
  
  # Web app name
  webAppName: 'myApplication-KhanhService'

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: 'latest'
    
    # Run Terraform Init on the pipeline agent 
    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: TerraformTaskV2@2
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'tfstate773713296'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'
        commandOptions: '-reconfigure'

    - task: TerraformTaskV2@2
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'
    
    # Run Terraform Apply
    - task: TerraformTaskV2@2
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
        
    - task: PublishPipelineArtifact@1
      displayName: Publish FakeRestAPI artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
        artifactName: 'drop-fakerestapi'
    
    - task: ArchiveFiles@2
      displayName: 'Archive Selenium'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'

    - task: PublishPipelineArtifact@1
      displayName: Publish Selenium artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        artifactName: 'drop-ui-tests'
        
    - task: ArchiveFiles@2
      displayName: "Archive PerformanceTestSuite"
      inputs:
        rootFolderOrFile: "$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/testsuite"
        includeRootFolder: false
        archiveType: "zip"
        archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip"
      # JMeter Test Suite - Publish
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
      displayName: "Upload Package"
      artifact: 'drop-perftests'  
        
- stage: Deploy
  jobs:
  - deployment: DeployFakeRestAPI
    displayName: 'Deploy Webapp'
    pool:
      myAgentPool
    environment:
        name:  'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: AzureWebApp@1
              displayName: 'Deploy Azure Web App'
              inputs:
                azureSubscription: '$(azureServiceConnectionId)'
                appName: $(webAppName)
                appType: 'webApp'
                package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
                DeploymentType: zipDeploy


- stage: Tests
  jobs:

  - job: Integration
    displayName: 'Integration Tests'
    pool:
      myAgentPool
    steps:

    - task: Bash@3
      displayName: 'Install Postman & Newman'
      inputs:
        targetType: 'inline'
        script: |
          #! /bin/bash
          pwd
          sudo snap install postman
          sudo npm install -g newman
          sudo npm install newman-reporter-junitfull -g      

    - task: Bash@3
      displayName: 'Regression Tests'
      continueOnError: true
      inputs:
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
        targetType: 'inline'
        script: 'newman run TestSuite.Regression.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'        
    
    - task: Bash@3
      displayName: 'Data Validation Tests'
      continueOnError: true
      inputs:
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
        targetType: 'inline'
        script: 'newman run TestSuite.Data-Validation.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'        
    
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'
        testRunTitle: 'Publish test results'
        searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'

  - job: Performance
    displayName: 'Performance Tests'
    pool:
      myAgentPool
    steps:  
    - task: Bash@3
      displayName: 'Endurance Test Suite'
      inputs:
        targetType: 'inline'
        script: |
          cd ~/        
          DIR=/home/azureuser/testsuite
          if [ ! -d "$DIR" ]; then
            mkdir testsuite
          fi
          mv /home/azureuser/myagent/_work/1/drop-perftests/$(Build.BuildId)-perftests.zip testsuite
          cd testsuite
          unzip -o $(Build.BuildId)-perftests.zip
          wget -q "https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.6.3.tgz"
          tar -xf apache-jmeter-5.6.3.tgz
          rm -Rf endurance-test-report
          ./apache-jmeter-5.6.3/bin/jmeter -n \
            -t EnduranceTestSuite.jmx \
            -l endurance-test-report/endurance-results.jtl \
            -e \
            -o endurance-test-report              

    - task: Bash@3
      displayName: 'Stress Test Suite'
      inputs:
        targetType: 'inline'
        script: |  
          cd ~/        
          DIR=/home/azureuser/testsuite
          if [ ! -d "$DIR" ]; then
            mkdir testsuite
          fi
          cd testsuite
          rm -Rf stress-test-report
          ./apache-jmeter-5.6.3/bin/jmeter -n \
            -t StressTestSuite.jmx \
            -l stress-test-report/stress-results.jtl \
            -e \
            -o stress-test-report    

    - task: Bash@3
      displayName: 'Print Performance Test Logs'
      inputs:
        targetType: 'inline'
        workingDirectory: /home/azureuser/testsuite
        script: |
          ls -lah endurance-test-report/
          ls -lah stress-test-report/
          cat jmeter.log        

  #--------------------------------------------#  
  # Selenium | Functional UI Tests
  # ToDo: 
  - deployment: VMDeploy
    displayName: Selenium Tests
    pool:
      myAgentPool
    environment:
      name:  'TEST'      
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop-ui-tests     # ToDo: Change/provide a name
            
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |           
                #! /bin/bash
                
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium
                cd ~/
                DIR=/home/azureuser/app
                if [ ! -d "$DIR" ]; then
                    mkdir app
                fi
                mv /home/azureuser/myagent/_work/1/drop-ui-tests/selenium-$(Build.BuildId).zip app
                cd app
                unzip -o selenium-$(Build.BuildId).zip
                FILE=/home/azureuser/app/chromedriver_linux64.zip
                if [ ! -f "$FILE" ]; then
                    wget https://storage.googleapis.com/chrome-for-testing-public/125.0.6422.141/linux64/chromedriver-linux64.zip
                    unzip -o chromedriver-linux64.zip
                    sudo ln -s $PWD/chromedriver /usr/local/bin/chromedriver
                fi
                export PATH=$PATH:/home/azureuser/app
                echo "Starting Selenium Tests"
                python3 add_remove_from_cart.py >> selenium.log                   
                echo "Completed Selenium Tests. Check selenium.log for results."
                cat selenium.log